{"version":3,"sources":["services/same-day.ts","services/storage.ts","services/periodManger.ts","views/calendar/Calendar.view.tsx","views/stats/Stats.view.tsx","App.tsx","reportWebVitals.ts","index.tsx","views/calendar/calendar.module.scss"],"names":["isSameDay","date1","date2","getDate","getMonth","getFullYear","localforage","setDriver","INDEXEDDB","LOCALSTORAGE","storage","load","key","a","getItem","save","data","setItem","remove","removeItem","PeriodManager","managerId","periods","id","getTimeDiff","timeDiffs","length","i","period","prevPeriod","timeDifference","date","getTime","inDays","Math","floor","push","loadPeriodsFromStorage","then","emitChange","this","savePeriodsToStorage","emit","remark","existingPeriod","getPeriod","newPeriod","index","splice","indexOf","forEach","p","timeDifferenceInDays","averageTimeDifferenceInDays","reduce","b","Date","EventEmitter","CalendarView","useState","setPeriods","selectedDate","setSelectedDate","predictionDate","setPredictionDate","create","periodManager","modalOpen","setModalOpen","useEffect","handlePeriodsChange","periodDates","map","predictNextPeriod","on","off","className","styles","container","onChange","value","tileClassName","view","some","prediction","isOpen","modal","overlayClassName","overlay","card","body","dateToggle_container","label","getDay","toggle","defaultChecked","e","target","checked","addPeriod","removePeriod","actions","onClick","undefined","Stats","console","log","toDateString","periodListJsx","toString","Modal","setAppElement","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1b9ac973.chunk.js","sourcesContent":["//check if two dates are the same day\r\nexport function isSameDay(date1: Date, date2: Date) {\r\n    return (\r\n        date1.getDate() === date2.getDate() &&\r\n        date1.getMonth() === date2.getMonth() &&\r\n        date1.getFullYear() === date2.getFullYear()\r\n    );\r\n}\r\n","import localforage from \"localforage\";\r\nlocalforage.setDriver([localforage.INDEXEDDB, localforage.LOCALSTORAGE]);\r\nconst load = async <T>(key: string): Promise<T | null> => {\r\n    return localforage.getItem(key);\r\n};\r\n\r\nconst save = (key: string, data: { [key: string]: any }) => {\r\n    return localforage.setItem(key, data);\r\n};\r\n\r\nconst remove = (key: string) => {\r\n    return localforage.removeItem(key);\r\n};\r\n\r\nexport const storage = {\r\n    load,\r\n    save,\r\n    remove\r\n};\r\n","import { isSameDay } from \"./same-day\";\r\nimport EventEmitter from \"events\";\r\nimport { storage } from \"./storage\";\r\n\r\nexport type Period = {\r\n    date: Date;\r\n    remark: string;\r\n};\r\n\r\n// A class that manages the period objects\r\nexport class PeriodManager extends EventEmitter {\r\n    private periods: Period[];\r\n    private id: string;\r\n    constructor(managerId: string) {\r\n        super();\r\n        this.periods = [];\r\n        this.id = managerId;\r\n        this.loadPeriodsFromStorage(this.id).then((periods) => {\r\n            if (periods) {\r\n                this.periods = periods;\r\n                this.emitChange();\r\n            }\r\n        });\r\n    }\r\n\r\n    private emitChange() {\r\n        this.savePeriodsToStorage(this.periods);\r\n        this.emit(\"change\", this.periods);\r\n    }\r\n\r\n    // load periods array from the storage and add it to periods array\r\n    private loadPeriodsFromStorage(id: string) {\r\n        return storage.load<Period[]>(id);\r\n    }\r\n\r\n    // save periods array to storage\r\n    public savePeriodsToStorage(periods: Period[]): void {\r\n        storage.save(this.id, periods);\r\n    }\r\n\r\n    // Adds a period to the manager\r\n    public addPeriod(date: Date, remark: string): void {\r\n        // get period for the date if present\r\n        let existingPeriod = this.getPeriod(date);\r\n        // if period is not present\r\n        // - create a new period and add to the list otherwise update the existing period\r\n        if (!existingPeriod) {\r\n            let newPeriod = {\r\n                date: date,\r\n                remark: remark\r\n            };\r\n            let index = 0;\r\n            for (let i = 0; i < this.periods.length; i++) {\r\n                const period = this.periods[i];\r\n                index = i;\r\n                if (period.date.getTime() > date.getTime()) {\r\n                    break;\r\n                }\r\n                index = i + 1;\r\n            }\r\n            this.periods.splice(index, 0, newPeriod);\r\n            this.emitChange();\r\n        } else {\r\n            existingPeriod.remark = remark;\r\n            this.emitChange();\r\n        }\r\n    }\r\n\r\n    // update the period remark\r\n    public updatePeriod(date: Date, remark: string): void {\r\n        let period = this.getPeriod(date);\r\n        if (period) {\r\n            period.remark = remark;\r\n            this.emitChange();\r\n        }\r\n    }\r\n\r\n    // remove period from the manager if exists\r\n    public removePeriod(date: Date): void {\r\n        let period = this.getPeriod(date);\r\n        if (period) {\r\n            this.periods.splice(this.periods.indexOf(period), 1);\r\n            this.emitChange();\r\n        }\r\n    }\r\n\r\n    // Returns the period by the date else return null\r\n    public getPeriod(date: Date): Period | null {\r\n        let period: Period | null = null;\r\n        this.periods.forEach((p) => {\r\n            if (isSameDay(p.date, date)) {\r\n                period = p;\r\n            }\r\n        });\r\n        return period;\r\n    }\r\n\r\n    // predict the next period date\r\n    public predictNextPeriod(): Date {\r\n        const timeDifferenceInDays = this.getTimeDiff(this.periods);\r\n        // get average time difference between periods\r\n        const averageTimeDifferenceInDays =\r\n            timeDifferenceInDays.reduce((a, b) => a + b, 0) /\r\n            timeDifferenceInDays.length;\r\n        // predict the next period date\r\n        return new Date(\r\n            this.periods[this.periods.length - 1].date.getTime() +\r\n                averageTimeDifferenceInDays * 24 * 60 * 60 * 1000\r\n        );\r\n    }\r\n\r\n    private getTimeDiff = (periods: Period[]) => {\r\n        const timeDiffs: number[] = [];\r\n        // no point of calculating time difference if there is only one period\r\n        if (periods.length <= 1) return [];\r\n        for (let i = 1; i < periods.length; i++) {\r\n            const period = periods[i];\r\n            const prevPeriod = periods[i - 1];\r\n            const timeDifference =\r\n                period.date.getTime() - prevPeriod.date.getTime();\r\n            const inDays = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\r\n            timeDiffs.push(inDays);\r\n        }\r\n        return timeDiffs;\r\n    };\r\n\r\n    // Returns the periods array\r\n    public getPeriods(): Period[] {\r\n        return this.periods;\r\n    }\r\n\r\n    // create an instance of the PeriodManager\r\n    public static create(id: string): PeriodManager {\r\n        return new PeriodManager(id);\r\n    }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"./calendar.scss\";\r\nimport styles from \"./calendar.module.scss\";\r\nimport { isSameDay } from \"../../services/same-day\";\r\nimport Modal from \"react-modal\";\r\nimport Toggle from \"react-toggle\";\r\nimport { Period, PeriodManager } from \"../../services/periodManger\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nexport function CalendarView() {\r\n    const [periods, setPeriods] = useState<Period[]>([]);\r\n    const [selectedDate, setSelectedDate] = useState<Date>();\r\n    const [predictionDate, setPredictionDate] = useState<Date | null>(null);\r\n    const [periodManager] = useState(() =>\r\n        PeriodManager.create(\"period_manager\")\r\n    );\r\n\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    // hook to attach event handlers for periods\r\n    useEffect(() => {\r\n        const handlePeriodsChange = (periods: Period[]) => {\r\n            const periodDates = periods.map((period) => ({ ...period }));\r\n            setPeriods(periodDates);\r\n            setPredictionDate(periodManager.predictNextPeriod());\r\n        };\r\n        periodManager.on(\"change\", handlePeriodsChange);\r\n        return () => {\r\n            periodManager.off(\"change\", handlePeriodsChange);\r\n        };\r\n    }, [periodManager]);\r\n\r\n    const openModal = (date: Date) => {\r\n        setSelectedDate(date);\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setSelectedDate(undefined);\r\n        setModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Calendar\r\n                onChange={(selectedDate: Date) => {\r\n                    return openModal(selectedDate);\r\n                }}\r\n                value={new Date()}\r\n                tileClassName={({ date, view }) => {\r\n                    if (view === \"month\") {\r\n                        const match = periods.some((period) =>\r\n                            isSameDay(date, period.date)\r\n                        );\r\n                        if (match) {\r\n                            return styles.periods;\r\n                        }\r\n                        if (predictionDate && isSameDay(date, predictionDate)) {\r\n                            return styles.prediction;\r\n                        }\r\n                    }\r\n                    return \"\";\r\n                }}\r\n            />\r\n            {selectedDate && (\r\n                <Modal\r\n                    isOpen={modalOpen}\r\n                    className={styles.modal}\r\n                    overlayClassName={styles.overlay}\r\n                >\r\n                    <div className={styles.card}>\r\n                        <div className={styles.body}>\r\n                            <label className={styles.dateToggle_container}>\r\n                                <span className={styles.label}>{`${new Date(\r\n                                    selectedDate\r\n                                ).getDay()}-${\r\n                                    new Date(selectedDate).getMonth() + 1\r\n                                }-${new Date(\r\n                                    selectedDate\r\n                                ).getFullYear()}`}</span>\r\n                                <Toggle\r\n                                    className={styles.toggle}\r\n                                    defaultChecked={periods.some((period) =>\r\n                                        isSameDay(selectedDate, period.date)\r\n                                    )}\r\n                                    onChange={(e) => {\r\n                                        const selected = e.target.checked;\r\n\r\n                                        if (selected) {\r\n                                            periodManager.addPeriod(\r\n                                                selectedDate,\r\n                                                \"\"\r\n                                            );\r\n                                        } else {\r\n                                            periodManager.removePeriod(\r\n                                                selectedDate\r\n                                            );\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <div className={styles.actions}>\r\n                            <button onClick={closeModal}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Period, PeriodManager } from \"../../services/periodManger\";\r\n\r\nexport function Stats() {\r\n    const [periods, setPeriods] = useState<Period[]>([]); //they should sorted by date in ascending order\r\n    const [periodManager] = useState(() =>\r\n        PeriodManager.create(\"period_manager\")\r\n    );\r\n    // hook to attach event handlers for periods\r\n    useEffect(() => {\r\n        const handlePeriodsChange = (periods: Period[]) => {\r\n            const periodDates = periods.map((period) => ({ ...period }));\r\n            setPeriods(periodDates);\r\n        };\r\n        periodManager.on(\"change\", handlePeriodsChange);\r\n        return () => {\r\n            periodManager.off(\"change\", handlePeriodsChange);\r\n        };\r\n    }, [periodManager]);\r\n\r\n    useEffect(() => {\r\n        if (periods.length === 0) return;\r\n        const timeDiffs = getTimeDiff(periods);\r\n        periods.forEach((period, i) => {\r\n            console.log(period.date.toDateString());\r\n            console.log(timeDiffs[i]);\r\n        });\r\n        console.log(\r\n            `Next period prediction: ${periodManager\r\n                .predictNextPeriod()\r\n                .toDateString()}`\r\n        );\r\n    }, [periodManager, periods]);\r\n\r\n    // a function to calculate day difference between each dates in periods\r\n    const getTimeDiff = (periods: Period[]) => {\r\n        const timeDiffs: number[] = [];\r\n        // no point of calculating time difference if there is only one period\r\n        if (periods.length <= 1) return [];\r\n        for (let i = 1; i < periods.length; i++) {\r\n            const period = periods[i];\r\n            const prevPeriod = periods[i - 1];\r\n            const timeDifference =\r\n                period.date.getTime() - prevPeriod.date.getTime();\r\n            const inDays = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\r\n            timeDiffs.push(inDays);\r\n        }\r\n        return timeDiffs;\r\n    };\r\n\r\n    const periodListJsx = periods.map((period) => {\r\n        return (\r\n            <div key={period.date.toString()}>\r\n                <li>{period.date.toDateString()}</li>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <ul>{periodListJsx}</ul>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { CalendarView } from \"./views/calendar/Calendar.view\";\nimport { Stats } from \"./views/stats/Stats.view\";\n\nfunction App() {\n    return (\n        <div>\n            <Switch>\n                <Route path=\"/\" exact>\n                    <CalendarView />\n                </Route>\n                <Route path=\"/stats\">\n                    <Stats />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"react-toggle/style.css\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"calendar_container__1Uxar\",\"periods\":\"calendar_periods__K_AYZ\",\"prediction\":\"calendar_prediction__1eG1C\",\"modal\":\"calendar_modal__13pdY\",\"overlay\":\"calendar_overlay__DLRUi\",\"dateToggle_container\":\"calendar_dateToggle_container__3Xcbd\",\"label\":\"calendar_label__3kSYl\",\"card\":\"calendar_card__1-GUN\",\"body\":\"calendar_body__1lFIH\",\"actions\":\"calendar_actions__3MsVj\"};"],"sourceRoot":""}